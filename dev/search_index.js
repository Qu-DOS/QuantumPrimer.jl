var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QComp","category":"page"},{"location":"#QComp","page":"Home","title":"QComp","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QComp.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QComp]","category":"page"},{"location":"#QComp.Data","page":"Home","title":"QComp.Data","text":"struct Data{S <: Vector{SS} where SS <: ArrayReg, L <: Vector{LL} where LL <: Real}\n\nStructure representing input data for the model.\n\nFields\n\ns::S: Input states.\nl::L: Labels.\n\n\n\n\n\n","category":"type"},{"location":"#QComp.GenericParams","page":"Home","title":"QComp.GenericParams","text":"Base.@kwdef mutable struct GenericParams{NN<:Integer, CC<:ChainBlock, TT<:AbstractVector{T} where T<:Real} <:Params\n\nDefines parameters for a quantum circuit without translational invariance.\n\nFields\n\nn::NN: Dimension of the quantum register (must be a power of 2).\ncirc::CC: Circuit structure of the QCNN.\nparams::TT = Float64[]: Vector of parameters, initialized to an empty vector of Float64 values.\n\n\n\n\n\n","category":"type"},{"location":"#QComp.InvariantParams","page":"Home","title":"QComp.InvariantParams","text":"Base.@kwdef mutable struct InvariantParams{NN<:Integer, CC<:ChainBlock, TT<:AbstractVector{T} where T<:Real} <:Params\n\nDefines parameters for a quantum circuit with translational invariance.\n\nFields\n\nn::NN: Dimension of the quantum register (must be a power of 2).\ncirc::CC: Circuit structure of the QCNN.\nparams::TT = Float64[]: Vector of parameters, initialized to an empty vector of Float64 values.\n\n\n\n\n\n","category":"type"},{"location":"#QComp.Params","page":"Home","title":"QComp.Params","text":"abstract type Params end\n\nAbstract type representing parameters for the QCNN.\n\n\n\n\n\n","category":"type"},{"location":"#QComp.QSVT_square-NTuple{4, Any}","page":"Home","title":"QComp.QSVT_square","text":"QSVT_square(n, d, phis, A)\n\nBuild the QSVT (Quantum Singular Value Transform) sequence.\n\nArguments\n\nn: Number of qubits.\nd: Dimensionality parameter.\nphis: Array of phase angles.\nA: Matrix to transform.\n\nReturns\n\nThe QSVT sequence circuit.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.Usp-Tuple{Any, Any}","page":"Home","title":"QComp.Usp","text":"Usp(phis, a)\n\nBuild the signal processing operator.\n\nArguments\n\nphis: Array of phase angles.\na: Angle parameter.\n\nReturns\n\nThe signal processing operator circuit.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.block_encode2-Tuple{Any, Any}","page":"Home","title":"QComp.block_encode2","text":"block_encode2(n, A)\n\nEncode a block using a method.\n\nArguments\n\nn: Number of qubits.\nA: Matrix to encode.\n\nReturns\n\nThe encoded block circuit.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.build_QCNN-Tuple{Any}","page":"Home","title":"QComp.build_QCNN","text":"build_QCNN(n)\n\nBuild a quantum circuit for a Quantum Convolutional Neural Network (QCNN).\n\nArguments\n\nn: Dimension of the quantum register.\n\nReturns\n\nA quantum circuit representing the QCNN.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.conv_Ry-Tuple{Any, Any, Any}","page":"Home","title":"QComp.conv_Ry","text":"conv_Ry(n, i, j)\n\nAnsatz for the convolutional layer. Use Ry gate to keep ansatz real (adapted from arxiv:2108.00661v2).\n\nArguments\n\nn: Dimension of the quantum register.\ni: Index of the first qubit.\nj: Index of the second qubit.\n\nReturns\n\nA quantum circuit implementing convolutional layers with Ry gates.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.eval_Usp-Tuple{Any, Any}","page":"Home","title":"QComp.eval_Usp","text":"eval_Usp(x, phis)\n\nEvaluate the signal processing operator.\n\nArguments\n\nx: Input value.\nphis: Array of phase angles.\n\nReturns\n\nThe result of applying the signal processing operator.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.eval_full_grad-Tuple{Data, InvariantParams, Any}","page":"Home","title":"QComp.eval_full_grad","text":"eval_full_grad(d::Data, p::InvariantParams, sig)\n\nCompute the full gradient of the cost function for input data with parameters with translational invariance.\n\nArguments\n\nd::Data: Input data and labels.\np::InvariantParams: Model parameters.\nsig: Boolean indicating whether to use sigmoid activation.\n\nReturns\n\nThe total gradient of the cost function.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.eval_full_loss-Tuple{Data, Params, Any}","page":"Home","title":"QComp.eval_full_loss","text":"eval_full_loss(d::Data, p::Params, sig)\n\nEvaluate the full mean squared error (MSE) loss of a model on input data.\n\nArguments\n\nd::Data: Input data and labels.\np::Params: Model parameters.\nsig: Boolean indicating whether to use sigmoid activation. \n\nReturns\n\nThe total mean squared error loss.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.eval_grad-Tuple{Any, GenericParams}","page":"Home","title":"QComp.eval_grad","text":"eval_grad(state, p::GenericParams)\n\nCompute the gradient of the cost function for a given state.\n\nArguments\n\nstate: Input state.\np::GenericParams: Model parameters.\n\nReturns\n\nThe gradient of the cost function.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.eval_grad-Tuple{Any, InvariantParams}","page":"Home","title":"QComp.eval_grad","text":"eval_grad(state, p::InvariantParams)\n\nCompute the gradient of the cost function for a given state with parameters with translational invariance.\n\nArguments\n\nstate: Input state.\np::InvariantParams: Model parameters.\n\nReturns\n\nThe gradient of the cost function.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.eval_loss-Tuple{Any, GenericParams}","page":"Home","title":"QComp.eval_loss","text":"eval_loss(state, p::GenericParams)\n\nEvaluate the loss of a model (with no invariance) applied to a state.\n\nArguments\n\nstate: Input state.\np::GenericParams: Model parameters.\n\nReturns\n\nThe loss value.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.eval_loss-Tuple{Any, InvariantParams}","page":"Home","title":"QComp.eval_loss","text":"eval_loss(state, p::InvariantParams)\n\nEvaluate the loss of a translational invariant model applied to a state.\n\nArguments\n\nstate: Input state.\np::InvariantParams: Model parameters.\n\nReturns\n\nThe loss value.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.expand_params-Tuple{InvariantParams}","page":"Home","title":"QComp.expand_params","text":"expand_params(p::InvariantParams)\n\nExpand unique translational invariant parameters to a full vector.\n\nArguments\n\np::InvariantParams: Parameters object containing circuit information.\n\nReturns\n\nA vector representing expanded parameters.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.initialize_params-Tuple{InvariantParams}","page":"Home","title":"QComp.initialize_params","text":"initialize_params(p::InvariantParams)\n\nInitialize parameters for a quantum circuit with translational invariance.\n\nArguments\n\np::InvariantParams: Parameters object containing circuit information.\n\nErrors\n\nThrows an error if the register dimension is not a power of 2.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.loss-Tuple{Any, Any, Any}","page":"Home","title":"QComp.loss","text":"loss(target, xs, phis)\n\nCompute the loss function for a given target, inputs, and phase angles.\n\nArguments\n\ntarget: Target value.\nxs: Array of input values.\nphis: Array of phase angles.\n\nReturns\n\nThe loss value.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.pcp-Tuple{Any, Any}","page":"Home","title":"QComp.pcp","text":"pcp(n, phi)\n\nGenerate a projected controlled phase gate.\n\nArguments\n\nn: Number of qubits.\nphi: Phase angle.\n\nReturns\n\nThe projected controlled phase gate circuit.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.reduce_params-Tuple{Any, Any}","page":"Home","title":"QComp.reduce_params","text":"reduce_params(n, params)\n\nReduce a vector of parameters to the unique set of parameters in the translational invariant QCNN. Performs the  sum of the corresponding parameters in the circuit. Used in evalfullgrad.\n\nArguments\n\nn: Dimension of the quantum register.\nparams: Vector of \"extended\" parameters.\n\nReturns\n\nA vector of unique parameters.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.sigmoid-Tuple{Any}","page":"Home","title":"QComp.sigmoid","text":"sigmoid(x)\n\nCompute the sigmoid function.\n\nArguments\n\nx: Input value.\n\nReturns\n\nThe sigmoid of the input value.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.test_model-Tuple{Data, Params, Any}","page":"Home","title":"QComp.test_model","text":"test_model(d::Data, p::Params, sig)\n\nEvaluate classification accuracy of the model.\n\nArguments\n\nd::Data: Input data and labels.\np::Params: Model parameters.\nsig: Boolean indicating whether to use sigmoid activation.\n\nReturns\n\npreds: Predicted values.\nsuc_rate: Success rate.\nsuc_inds: Indices of successful predictions.\n\n\n\n\n\n","category":"method"},{"location":"#QComp.train_test_model-Tuple{Data, Data, Params, Any, Any, Any}","page":"Home","title":"QComp.train_test_model","text":"train_test_model(d1::Data, d2::Data, p::Params, iters, sig, lr; output=false)\n\nTrain and test the model, outputting final predictions and train/test accuracy.\n\nArguments\n\nd1::Data: Training data and labels.\nd2::Data: Testing data and labels.\np::Params: Initial model parameters.\niters: Number of training iterations.\nsig: Boolean indicating whether to use sigmoid activation.\nlr: Learning rate for optimization.\noutput: Boolean indicating whether to output intermediate training information.\n\nReturns\n\np.params: Final model parameters.\nloss_track: Track of loss values during training.\ntr_track: Track of training accuracy during training.\nte_track: Track of testing accuracy during training.\ntr_preds: Predictions on training data.\nte_preds: Predictions on testing data.\n\n\n\n\n\n","category":"method"}]
}
